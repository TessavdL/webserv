----------
CLIENT_MAX_BODY_SIZE
----------
Syntax:	client_max_body_size size;
Default:	
client_max_body_size 1m;
Context:	http, server, location

Sets the maximum allowed size of the client request body. If the size in a 
request exceeds the configured value, the 413 (Request Entity Too Large) error 
is returned to the client. Please be aware that browsers cannot correctly 
display this error. Setting size to 0 disables checking of client request body 
size.

----------
ROOT
----------
Syntax:	root path;
Default:	
root html;
Context:	http, server, location, if in location
Sets the root directory for requests. For example, with the following 
configuration

location /i/ {
    root /data/w3;
}
The /data/w3/i/top.gif file will be sent in response to the “/i/top.gif” request.

The path value can contain variables, except $document_root and $realpath_root.

A path to the file is constructed by merely adding a URI to the value of the 
root directive. If a URI has to be modified, the alias directive should be used.

----------
ERROR_PAGE
----------
Syntax:	error_page code ... [=[response]] uri;
Default:	—
Context:	http, server, location, if in location
Defines the URI that will be shown for the specified errors. A uri value can contain variables.

Example:

error_page 404             /404.html;
error_page 500 502 503 504 /50x.html;
This causes an internal redirect to the specified uri with the client request 
method changed to “GET” (for all methods other than “GET” and “HEAD”).

Furthermore, it is possible to change the response code to another using the 
“=response” syntax, for example:

error_page 404 =200 /empty.gif;
If an error response is processed by a proxied server or a 
FastCGI/uwsgi/SCGI/gRPC server, and the server may return different response
codes (e.g., 200, 302, 401 or 404), it is possible to respond with the code it
returns:

error_page 404 = /404.php;
If there is no need to change URI and method during internal redirection it is 
possible to pass error processing into a named location:

location / {
    error_page 404 = @fallback;
}

location @fallback {
    proxy_pass http://backend;
}
If uri processing leads to an error, the status code of the last occurred error 
is returned to the client.
It is also possible to use URL redirects for error processing:

error_page 403      http://example.com/forbidden.html;
error_page 404 =301 http://example.com/notfound.html;
In this case, by default, the response code 302 is returned to the client. It 
can only be changed to one of the redirect status codes (301, 302, 303, 307, and
308).

The code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.
The code 308 was not treated as a redirect until version 1.13.0.
These directives are inherited from the previous configuration level if and only
if there are no error_page directives defined on the current level.

----------
LIMIT_EXCEPT
----------
Syntax:	limit_except method ... { ... }
Default:	—
Context:	location
Limits allowed HTTP methods inside a location. The method parameter can be one of the following: GET, HEAD, POST, PUT, DELETE, MKCOL, COPY, MOVE, OPTIONS, PROPFIND, PROPPATCH, LOCK, UNLOCK, or PATCH. Allowing the GET method makes the HEAD method also allowed. Access to other methods can be limited using the ngx_http_access_module, ngx_http_auth_basic_module, and ngx_http_auth_jwt_module (1.13.10) modules directives:

limit_except GET {
    allow 192.168.1.0/32;
    deny  all;
}
Please note that this will limit access to all methods except GET and HEAD.

----------
LOCATION
----------
Syntax:	location [ = | ~ | ~* | ^~ ] uri { ... }
location @name { ... }
Default:	—
Context:	server, location

Sets configuration depending on a request URI. 
The matching is performed against a normalized URI, after decoding the text 
encoded in the “%XX” form, resolving references to relative path components “.” 
and “..”, and possible compression of two or more adjacent slashes into a single
slash.

A location can either be defined by a prefix string, or by a regular expression.
Regular expressions are specified with the preceding 
“~*” modifier (for case-insensitive matching),
or the “~” modifier (for case-sensitive matching).
To find location matching a given request, nginx first checks locations defined 
using the prefix strings (prefix locations). Among them, the location with the 
longest matching prefix is selected and remembered. Then regular expressions are
checked, in the order of their appearance in the configuration file. The search
of regular expressions terminates on the first match, and the corresponding 
configuration is used. If no match with a regular expression is found then the 
configuration of the prefix location remembered earlier is used.

location blocks can be nested, with some exceptions mentioned below. For 
case-insensitive operating systems such as macOS and Cygwin, matching with 
prefix strings ignores a case (0.7.7). However, comparison is limited to 
one-byte locales.

Regular expressions can contain captures (0.7.40) that can later be used in 
other directives. If the longest matching prefix location has the “^~” 
modifier then regular expressions are not checked.

Also, using the “=” modifier it is possible to define an exact match of URI and 
location. If an exact match is found, the search terminates. For example, 
if a “/” request happens frequently, defining “location = /” will speed up the 
processing of these requests, as search terminates right after the first 
comparison. Such a location cannot obviously contain nested locations.

In versions from 0.7.1 to 0.8.41, if a request matched the prefix location 
without the “=” and “^~” modifiers, the search also terminated and regular 
expressions were not checked. Let’s illustrate the above by an example:

location = / {
    [ configuration A ]
}

location / {
    [ configuration B ]
}

location /documents/ {
    [ configuration C ]
}

location ^~ /images/ {
    [ configuration D ]
}

location ~* \.(gif|jpg|jpeg)$ {
    [ configuration E ]
}
The “/” request will match configuration A, the “/index.html” request will match
configuration B, the “/documents/document.html” request will match configuration
C, the “/images/1.gif” request will match configuration D, and the 
“/documents/1.jpg” request will match configuration E.

The “@” prefix defines a named location. Such a location is not used for a 
regular request processing, but instead used for request redirection. They 
cannot be nested, and cannot contain nested locations.

If a location is defined by a prefix string that ends with the slash character,
and requests are processed by one of proxy_pass, fastcgi_pass, uwsgi_pass, 
scgi_pass, memcached_pass, or grpc_pass, then the special processing is 
performed. In response to a request with URI equal to this string, but without 
the trailing slash, a permanent redirect with the code 301 will be returned to 
the requested URI with the slash appended. If this is not desired, an exact 
match of the URI and location could be defined like this:

location /user/ {
    proxy_pass http://user.example.com;
}

location = /user {
    proxy_pass http://login.example.com;
}

---------
LISTEN
---------
